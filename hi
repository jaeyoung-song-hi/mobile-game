<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Í∏âÎò• ÌÉàÏ∂ú! v2</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jua&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-color: #F3F4F6;
            --primary-color: #3B82F6;
            --secondary-color: #10B981;
            --danger-color: #EF4444;
            --text-color: #1F2937;
            --border-color: #D1D5DB;
            --home-bg: #FEFCE8;
            --street-bg: #E0F2FE;
        }

        body {
            font-family: 'Jua', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
            touch-action: none;
        }

        #game-container {
            width: 100%;
            max-width: 420px;
            height: 100%;
            background-color: white;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border-radius: 20px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
        }

        #header {
            padding: 15px;
            background-color: var(--primary-color);
            color: white;
            text-align: center;
            border-bottom: 5px solid rgba(0,0,0,0.1);
            z-index: 10;
        }

        #header h1 { margin: 0; font-size: 1.8em; }

        #status-bar {
            display: flex;
            justify-content: space-around;
            padding: 10px;
            background: #f9fafb;
            font-size: 1.1em;
            z-index: 10;
        }

        #game-area {
            flex-grow: 1;
            position: relative;
            overflow: hidden;
            border-bottom: 1px solid var(--border-color);
            border-top: 1px solid var(--border-color);
        }
        
        .scene {
            width: 100%;
            height: 100%;
            position: absolute;
        }

        #home-scene { background-color: var(--home-bg); }
        #street-scene { background-color: var(--street-bg); }

        .game-object {
            position: absolute;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 36px;
        }

        #player {
            width: 40px;
            height: 40px;
            background-color: #FBBF24;
            border-radius: 50%;
            border: 3px solid #F59E0B;
            transition: top 0.1s linear, left 0.1s linear;
            font-size: 24px;
            z-index: 5;
        }

        #fridge { top: 20px; right: 20px; width: 50px; height: 70px; font-size: 50px; }
        #bed { bottom: 20px; left: 20px; width: 80px; height: 60px; font-size: 50px; }
        #treadmill { bottom: 20px; right: 20px; width: 70px; height: 50px; font-size: 50px; }
        #door { top: 20px; left: 20px; width: 50px; height: 70px; font-size: 50px; }
        #toilet { font-size: 40px; width: 50px; height: 50px; }
        
        .obstacle {
            background-color: #9CA3AF;
            border-radius: 8px;
            width: 30px;
            height: 60px;
        }

        #timer-container {
            width: 90%;
            margin: 15px auto;
            background-color: var(--border-color);
            border-radius: 10px;
            overflow: hidden;
        }

        #timer-bar {
            height: 25px;
            width: 100%;
            background-color: var(--secondary-color);
            border-radius: 10px;
            transition: width 0.5s linear, background-color 0.5s linear;
        }

        #controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, 1fr);
            gap: 10px;
            padding: 20px;
            background-color: #f9fafb;
        }

        .control-btn {
            padding: 15px; font-size: 2em; border: none; border-radius: 15px;
            background-color: white; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            cursor: pointer; color: var(--primary-color); user-select: none;
        }
        .control-btn:active { transform: translateY(2px); box-shadow: 0 2px 3px rgba(0,0,0,0.1); }

        #up { grid-column: 2 / 3; grid-row: 1 / 2; }
        #left { grid-column: 1 / 2; grid-row: 2 / 3; }
        #right { grid-column: 3 / 4; grid-row: 2 / 3; }
        #down { grid-column: 2 / 3; grid-row: 2 / 3; }

        #modal {
            position: absolute; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.6); display: flex;
            justify-content: center; align-items: center; z-index: 100;
        }

        .modal-content {
            background-color: white; padding: 20px; border-radius: 20px;
            text-align: center; width: 85%; max-width: 380px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        .modal-content h2 { margin-top: 0; font-size: 1.8em; }
        .modal-content p { font-size: 1.1em; margin-bottom: 20px; }
        
        .choice-buttons { display: flex; flex-direction: column; gap: 10px; }

        .modal-button {
            padding: 12px 25px; border: none; border-radius: 12px;
            background-color: var(--primary-color); color: white;
            font-size: 1.1em; cursor: pointer; font-family: 'Jua', sans-serif;
            transition: background-color 0.2s; width: 100%;
        }
        .modal-button:hover { background-color: #2563EB; }
        .modal-button.cancel { background-color: #6B7280; }
        .modal-button.cancel:hover { background-color: #4B5563; }
        
        .hidden { display: none; }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="header"><h1>Í∏âÎò• ÌÉàÏ∂ú! v2</h1></div>
        <div id="status-bar">
            <span>Î†àÎ≤®: <span id="level">1</span></span>
            <span>Ï†êÏàò: <span id="score">0</span></span>
        </div>

        <div id="game-area">
            <!-- Scene 1: Home -->
            <div id="home-scene" class="scene">
                <div id="fridge" class="game-object">üßä</div>
                <div id="bed" class="game-object">üõèÔ∏è</div>
                <div id="treadmill" class="game-object">üèÉ</div>
                <div id="door" class="game-object">üö™</div>
            </div>
            <!-- Scene 2: Street -->
            <div id="street-scene" class="scene hidden">
                <div id="toilet" class="game-object">üöΩ</div>
            </div>
            <!-- Player is common to all scenes -->
            <div id="player" class="game-object">üòä</div>
        </div>

        <div id="timer-container">
            <div id="timer-bar"></div>
        </div>
        <div id="controls">
            <button class="control-btn" id="up">‚ñ≤</button>
            <button class="control-btn" id="left">‚óÄ</button>
            <button class="control-btn" id="down">‚ñº</button>
            <button class="control-btn" id="right">‚ñ∂</button>
        </div>

        <div id="modal" class="hidden">
            <div class="modal-content">
                <h2 id="modal-title"></h2>
                <p id="modal-message"></p>
                <div id="modal-buttons" class="choice-buttons"></div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const player = document.getElementById('player');
        const gameArea = document.getElementById('game-area');
        const levelDisplay = document.getElementById('level');
        const scoreDisplay = document.getElementById('score');
        const timerBar = document.getElementById('timer-bar');
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modal-title');
        const modalMessage = document.getElementById('modal-message');
        const modalButtons = document.getElementById('modal-buttons');
        const homeScene = document.getElementById('home-scene');
        const streetScene = document.getElementById('street-scene');
        const toilet = document.getElementById('toilet');

        // Game State
        let gameState = {
            phase: 'PREPARATION', // PREPARATION, URGENCY
            level: 1,
            score: 0,
            playerPos: { x: 0, y: 0 },
            gameActive: false,
            timerId: null,
            timeRemaining: 0,
            maxTime: 0,
            playerSpeed: 10,
            penalties: { food: 0, condition: 0, weather: 0 }
        };

        // Game Objects and Scenarios
        const homeObjects = {
            fridge: document.getElementById('fridge'),
            bed: document.getElementById('bed'),
            treadmill: document.getElementById('treadmill'),
            door: document.getElementById('door')
        };
        const foodChoices = {
            'ÏùºÏÉÅÏãù üçö': 0, 'Í∏∞Î¶ÑÏßÑ ÏùåÏãù üçó': 3, 'Îß§Ïö¥ ÏùåÏãù üå∂Ô∏è': 4, 'Ï∞¨ ÏùåÏãù üç¶': 2, 'ÏÉÅÌïú ÏùåÏãù ü§¢': 6
        };
        const conditionChoices = {
            'Ìëπ Ïâ¨Í∏∞ üòä': 0, 'Ïä§Ìä∏Î†àÏä§ Î∞õÍ∏∞ ü§Ø': 3, 'ÏãùÌõÑ Ïö¥ÎèôÌïòÍ∏∞ üèÉüí®': 5
        };
        const weatherPenalty = { 'Îî∞ÎúªÌï®': 0, 'ÏåÄÏåÄÌï®': 2, 'Ï∂îÏõÄ': 3 };

        function showModal(title, message, buttons) {
            modalTitle.textContent = title;
            modalMessage.innerHTML = message;
            modalButtons.innerHTML = ''; // Clear previous buttons
            buttons.forEach(btnInfo => {
                const button = document.createElement('button');
                button.textContent = btnInfo.text;
                button.className = `modal-button ${btnInfo.class || ''}`;
                button.onclick = () => {
                    modal.classList.add('hidden');
                    if (btnInfo.callback) btnInfo.callback();
                };
                modalButtons.appendChild(button);
            });
            modal.classList.remove('hidden');
        }

        function updatePlayerPosition() {
            player.style.left = `${gameState.playerPos.x}px`;
            player.style.top = `${gameState.playerPos.y}px`;
        }
        
        function checkCollision(obj1, obj2) {
            const rect1 = obj1.getBoundingClientRect();
            const rect2 = obj2.getBoundingClientRect();
            return !(rect1.right < rect2.left || rect1.left > rect2.right || rect1.bottom < rect2.top || rect1.top > rect2.bottom);
        }

        function setupHomePhase() {
            gameState.phase = 'PREPARATION';
            gameState.gameActive = true;
            gameState.penalties = { food: 0, condition: 0, weather: 0 };
            
            player.textContent = 'üòä';
            levelDisplay.textContent = gameState.level;
            scoreDisplay.textContent = gameState.score;
            timerBar.style.width = '100%';
            timerBar.style.backgroundColor = 'var(--secondary-color)';

            homeScene.classList.remove('hidden');
            streetScene.classList.add('hidden');
            
            const gameAreaRect = gameArea.getBoundingClientRect();
            gameState.playerPos.x = gameAreaRect.width / 2 - 20;
            gameState.playerPos.y = gameAreaRect.height / 2 - 20;
            updatePlayerPosition();
        }

        function startUrgencyPhase() {
            gameState.phase = 'URGENCY';
            player.textContent = 'üò∞';
            
            homeScene.classList.add('hidden');
            streetScene.classList.remove('hidden');
            
            // Calculate time
            const baseTime = 25; // seconds
            const levelPenalty = gameState.level * 0.8;
            const weatherKeys = Object.keys(weatherPenalty);
            const randomWeather = weatherKeys[Math.floor(Math.random() * weatherKeys.length)];
            gameState.penalties.weather = weatherPenalty[randomWeather];

            gameState.maxTime = Math.max(5, baseTime - levelPenalty - gameState.penalties.food - gameState.penalties.condition - gameState.penalties.weather);
            gameState.timeRemaining = gameState.maxTime;

            // Setup street
            const gameAreaRect = gameArea.getBoundingClientRect();
            gameState.playerPos.x = gameAreaRect.width / 2 - 20;
            gameState.playerPos.y = gameAreaRect.height - 50; // Start at bottom
            updatePlayerPosition();
            
            toilet.style.left = `${gameAreaRect.width / 2 - 25}px`;
            toilet.style.top = `10px`; // At the top
            
            // TODO: Add obstacles to street scene
            
            showModal("ÏúºÏïÖ!", `Í∞ëÏûêÍ∏∞ Î∞∞Í∞Ä... ÌôîÏû•Ïã§Ïù¥ Î≥¥Ïù∏Îã§! Ïñ¥ÏÑú Í∞ÄÏûê!<br>(ÎÇ†Ïî®: ${randomWeather})`, [{ text: "Îã¨Î†§!", callback: startTimer }]);
        }

        function startTimer() {
            clearInterval(gameState.timerId);
            gameState.timerId = setInterval(() => {
                gameState.timeRemaining -= 0.1;
                const timerPercentage = (gameState.timeRemaining / gameState.maxTime) * 100;
                timerBar.style.width = `${timerPercentage}%`;

                if (timerPercentage < 50) timerBar.style.backgroundColor = '#FBBF24';
                if (timerPercentage < 25) timerBar.style.backgroundColor = 'var(--danger-color)';

                if (gameState.timeRemaining <= 0) gameOver();
            }, 100);
        }

        function handleHomeInteractions() {
            if (checkCollision(player, homeObjects.fridge)) {
                gameState.gameActive = false;
                const buttons = Object.entries(foodChoices).map(([text, penalty]) => ({
                    text: text,
                    callback: () => {
                        gameState.penalties.food = penalty;
                        gameState.gameActive = true;
                    }
                }));
                buttons.push({ text: 'Ïïà Î®πÏùÑÎûò', class: 'cancel', callback: () => { gameState.gameActive = true; }});
                showModal("ÎÉâÏû•Í≥†", "Î¨¥ÏóáÏùÑ Î®πÏùÑÍπå?", buttons);
            } else if (checkCollision(player, homeObjects.bed)) {
                gameState.gameActive = false;
                showModal("Ïπ®ÎåÄ", "Ïû†Ïãú Ïâ¥Íπå? Ïª®ÎîîÏÖòÏù¥ ÌöåÎ≥µÎê† Í±∞Ïïº.", [{ text: 'Í∑∏Îûò!', callback: () => { gameState.penalties.condition = 0; gameState.gameActive = true; }}, { text: 'ÏïÑÎãàÏïº', class: 'cancel', callback: () => { gameState.gameActive = true; }}]);
            } else if (checkCollision(player, homeObjects.treadmill)) {
                gameState.gameActive = false;
                 const buttons = Object.entries(conditionChoices).map(([text, penalty]) => ({
                    text: text,
                    callback: () => {
                        gameState.penalties.condition = penalty;
                        gameState.gameActive = true;
                    }
                }));
                 buttons.push({ text: 'Ïïà Ìï†Îûò', class: 'cancel', callback: () => { gameState.gameActive = true; }});
                showModal("Ïö¥Îèô", "Ïö¥ÎèôÏùÑ Ìï¥Î≥ºÍπå?", buttons);
            } else if (checkCollision(player, homeObjects.door)) {
                gameState.gameActive = false;
                showModal("Ïô∏Ï∂ú", "Ï§ÄÎπÑÎ•º ÎßàÏπòÍ≥† ÎÇòÍ∞àÍπå?", [{ text: 'ÎÇòÍ∞ÄÏûê!', callback: startUrgencyPhase }, { text: 'ÏïÑÏßÅ...', class: 'cancel', callback: () => { gameState.gameActive = true; }}]);
            }
        }

        function movePlayer(dx, dy) {
            if (!gameState.gameActive) return;

            const gameAreaRect = gameArea.getBoundingClientRect();
            const playerRect = player.getBoundingClientRect();

            let newX = gameState.playerPos.x + dx;
            let newY = gameState.playerPos.y + dy;

            // Boundary checks
            if (newX < 0) newX = 0;
            if (newY < 0) newY = 0;
            if (newX + playerRect.width > gameAreaRect.width) newX = gameAreaRect.width - playerRect.width;
            if (newY + playerRect.height > gameAreaRect.height) newY = gameAreaRect.height - playerRect.height;
            
            gameState.playerPos.x = newX;
            gameState.playerPos.y = newY;

            updatePlayerPosition();
            
            // Check for phase-specific interactions
            if (gameState.phase === 'PREPARATION') {
                handleHomeInteractions();
            } else if (gameState.phase === 'URGENCY') {
                if (checkCollision(player, toilet)) {
                    levelComplete();
                }
            }
        }

        function levelComplete() {
            gameState.gameActive = false;
            clearInterval(gameState.timerId);
            gameState.score += 100 + Math.floor(gameState.timeRemaining * 10);
            gameState.level++;
            player.textContent = 'üòå';
            showModal("ÏÑ±Í≥µ!", "Ìú¥... ÏÇ¥ÏïòÎã§! Îã§Ïùå Î†àÎ≤®ÏùÑ Ï§ÄÎπÑÌïòÏûê.", [{ text: 'Ï¢ãÏïÑ!', callback: setupHomePhase }]);
        }

        function gameOver() {
            gameState.gameActive = false;
            clearInterval(gameState.timerId);
            player.textContent = 'üò±';
            showModal("Í≤åÏûÑ Ïò§Î≤Ñ", "ÏúºÏïÖ! Ïã§ÏàòÌñàÎã§...<br>ÏµúÏ¢Ö Ï†êÏàò: " + gameState.score, [{ text: 'Îã§Ïãú ÏãúÏûë', callback: init }]);
        }

        function init() {
            gameState.level = 1;
            gameState.score = 0;
            showModal("Í≤åÏûÑ ÏÑ§Î™Ö", "ÏßëÏóêÏÑú ÏùåÏãùÏùÑ Î®πÍ≥† Ïª®ÎîîÏÖòÏùÑ Ï°∞Ï†àÌïú Îí§, Ïô∏Ï∂úÌï¥ÏÑú ÌôîÏû•Ïã§ÍπåÏßÄ Î¨¥ÏÇ¨Ìûà ÎèÑÏ∞©ÌïòÏÑ∏Ïöî! ÎãπÏã†Ïùò ÏÑ†ÌÉùÏù¥ Î™®Îì† Í≤ÉÏùÑ Í≤∞Ï†ïÌï©ÎãàÎã§.", [{ text: "Í≤åÏûÑ ÏãúÏûë!", callback: setupHomePhase }]);
        }

        // Controls
        const controls = {
            'ArrowUp': () => movePlayer(0, -gameState.playerSpeed), 'ArrowDown': () => movePlayer(0, gameState.playerSpeed),
            'ArrowLeft': () => movePlayer(-gameState.playerSpeed, 0), 'ArrowRight': () => movePlayer(gameState.playerSpeed, 0)
        };
        document.addEventListener('keydown', (e) => { if (controls[e.key]) { e.preventDefault(); controls[e.key](); } });
        
        document.getElementById('up').addEventListener('pointerdown', () => movePlayer(0, -gameState.playerSpeed));
        document.getElementById('down').addEventListener('pointerdown', () => movePlayer(0, gameState.playerSpeed));
        document.getElementById('left').addEventListener('pointerdown', () => movePlayer(-gameState.playerSpeed, 0));
        document.getElementById('right').addEventListener('pointerdown', () => movePlayer(gameState.playerSpeed, 0));

        // Initialize Game
        window.onload = init;
    </script>
</body>
</html>
